#+TITLE: CS345 Homework 2
#+AUTHOR: Parker Gabel
#+LATEX_CLASS: article
#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+LATEX_COMPILER: pdflatex
#+DATE: \today
#+OPTIONS: toc:nil
* It is in O(n^2) and \Omega(n)
  Let n_0 = 1 and c = 1. 
** Notice for all n \ge n_0, if n is odd then f(n) = n \le n^2 and if n is even then f(n) = n^2 = n^2 so f(n) \in O(n^2).
** Notice for all n \gt n_0, if n is odd then f(n) = n = n and if n is even then f(n) = n^2 \gt n.
* Yes. Since big theta is an equvalence relation, it is reflexive. For every function f(n), f(n) \in \Theta(f(n))
* This is reflexive, symmetric, and transitive
** Claim: f(n) \in \Theta(f(n))
*** Subclaim: f(n) \in O(f(n))
    Let n_0 be any positive integer and c be 1. Notice that for all n \ge n_0 , f(n) \le f(n) (in fact it is strictly equal). So f(n) \in O(f(n)).
*** Subclaim: f(n) \in \Omega(f(n))
    Let n_0 be any positive integer and c be 1. Notice that for all n \gt n_0 , f(n) \ge f(n) (in fact it is strictly equal). So f(n) \in \Omega(f(n)).
\paragraph Since f(n) is in both O(f(n)) and \Omega(f(n)), it is \Theta(f(n)).
** Claim: If f(n) \in \Theta(g(n)) then g(n) \in \Theta(f(n))
   Assume f(n) \in \Theta(g(n)). So f(n) \in O(g(n)) and f(n) \in \Omega(g(n)). So there is some n_0 and c such that for all n \ge n_0 c_1 g(n) \le f(n) \le c_2 g(n) for some c_1 and c_2. So f(n) \le c_2 g(n) = 1/c_2 f(n) \le g(n). So c_1 g(n) \le f(n) = g(n) \le 1/c_1 f(n). So 1/c_2 f(n) \le g(n) \le 1/c_1 f(n). So g(n) \in \Theta(f(n)) 
** Claim: If f(n) \in \Theta(g(n)) and g(n) \in \Theta(h(n)) then f(n) \in \Theta(h(n)).
   Assume f(n) \in \Theta(g(n)) and g(n) \in \Theta(h(n)). So there exists a,b,c,d \gt 0 and n \gt 0 such that ag(n) \le f(n) \le bg(n) and ch(n) \le g(n) \le dh(n). So f(n) \ge ag(n) \ge a(ch(n)) = ac(h(n)) and f(n) \le bg(n) \le b(dh(n)) = bd(h(n)). So ac(h(n)) \le f(n) \le bd(h(n)). So f(n) \in \Theta(h(n)).
* 2, log_3(n), log_2(n), n^{2/3}, 20n, 4n^2, 3^n, n!
* 100n, 10n, n, 2^100n
* 
** lim log(n^2)/(log(n) + 5) = 2. Since this is a constant f(n) = \Theta(n)
** lim (nlog(n) + n)/log(n) = \infin. So f(n) grows faster so f(n) \in \Omega(g(n))
* 
** \Theta(n^2). The loop must run n*n times.
** \Theta(n log(n)). The outer loop runs n times and the inner loop runs log(n) times
** \Theta(n log(n)). The outer loop runs log(n) times and the inner loop runs n times
** \Theta(n^2 log(n)). The outer loop is run n times and the inner loop costs n log(n).
** \Theta(n^2). For each time the outer loop is run, the inner loop happens a random amount of times but it is quranteed to run i times for each value of i from 1 to n. 
* 
  #+BEGIN_SRC 
  /** @return The position of an element in sorted array A
  with value k. If k is not in A, return A.length. */
  static int binary(int[] A, int k) {
      if (A[0] > k) {
          return ERROR
      }
      int l = -1;
      int r = A.length; // l and r are beyond array bounds
      while (l+1 != r) { // Stop when l and r meet
           int i = (l+r)/2; // Check middle of remaining subarray
           if (k < A[i]) r = i; // In left half
           if (k == A[i]) return i; // Found it
           if (k > A[i] && k < A[i + 1]) return i + 1; // k not in array
	   else: l = i // In right half
       }
       return A.length; // Search value not in A
    }
  #+END_SRC
* 
** n \gt DE / (P + E), E = 1 and P = 4 and D = 30. So n \gt 30 / 5 = 6. The break even point is six. When n is less than 6 then the linked list requires less space.
** n \gt DE / (P + E), E = 32 and P = 4, and D = 40. So n \gt 32*40 / 36 = 1280 / 36 = 320 / 9 = 35.55. So the break even point is 35. When n is less than 35 then the linked list requires less space.
* 
  #+BEGIN_SRC 
  E x;
  for(int i = 0; i < Q.length(); i++) {
      x = Q.dequeue();
      S.push(x);
  }
   for(int i = 0; i < S.length(); i++) {
      x = S.pop();
      Q.enqueue(x);
  }
  #+END_SRC 
